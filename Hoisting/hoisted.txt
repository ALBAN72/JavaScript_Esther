
https://developer.mozilla.org/fr/docs/Glossaire/Hoisting
https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/var

JavaScript possède une différence importante quant aux autres langages de programmation comme Java : en JavaScript,
les blocs ne créent pas de portées pour les variables déclarées avec var, c'est la fonction qui gère la portée d'une variable
déclarée avec var. Avec ECMAScript 2015, les instructions de déclarations, let et const permettent de créer des variables
dont la portée est limitée à celle du bloc qui l'englobe.

Il est important de noter que la remontée des variables affecte uniquement la déclaration et pas l'initialisation
de la valeur. La valeur sera affectée lorsque le moteur accèdera à l'instruction d'affectation. Par exemple :

bla = 2
var bla;
// ...

// est implicitement traité comme :

var bla;
bla = 2;

function faireQuelqueChose() {
  console.log(truc); // undefined
  var truc = 111;
  console.log(truc); // 111
}

// Correspond en fait à :
function faireQuelqueChose() {
  var truc;
  console.log(truc); // undefined
  truc = 111;
  console.log(truc); // 111
}

Exemple :

num = 6;
num + 7;
var num;

/* Ne donne aucune erreur tant que num est déclarée*/
JavaScript hisse seulement les déclarations, pas les initialisations.
Si vous utilisez une variable qui est déclarée et initialisée après l'avoir utilisée, s
a valeur sera indéfinie. Les deux exemples ci-dessous montrent le même comportement.

var x = 1; // Initialise x
console.log(x + " " + y); // Affiche '1 undefined'
var y = 2; // Initialise y


// Le code suivant se comportera de la même façon que le code précédent:

var x = 1; // Initialise x
var y; // Déclare y
console.log(x + " " + y); // Affiche '1 undefined'
y = 2; // Initialise y
